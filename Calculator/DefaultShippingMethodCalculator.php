<?php
declare(strict_types=1);

namespace LSB\OrderBundle\Calculator;

use LSB\LocaleBundle\Entity\CountryInterface;
use LSB\OrderBundle\CartHelper\PriceHelper;
use LSB\OrderBundle\Entity\CartInterface;
use LSB\OrderBundle\Entity\CartPackageInterface;
use LSB\OrderBundle\Interfaces\ShippingFormCartCalculatorInterface;
use LSB\OrderBundle\Model\CartCalculatorResult;
use LSB\OrderBundle\Model\CartShippingMethodCalculatorResult;
use LSB\PricelistBundle\Model\Price;
use LSB\ProductBundle\Entity\ProductInterface;
use LSB\ShippingBundle\Entity\Method;
use LSB\UtilityBundle\Helper\ValueHelper;
use Money\Money;

class DefaultShippingMethodCalculator extends BaseCartCalculator implements ShippingFormCartCalculatorInterface
{
    const MODULE = 'shippingForm';

    const NAME = self::MODULE;

    protected ?Method $shippingMethod = null;

    protected ?CountryInterface $country = null;

    protected ?CartPackageInterface $cartPackage = null;

    protected ?Money $totalProductsNetto = null;

    protected ?Money $totalProductsGross = null;

    /**
     * @param PriceHelper $priceHelper
     */
    public function __construct(protected PriceHelper $priceHelper)
    {
    }

    public function getModule(): string
    {
        return static::MODULE;
    }

    /**
     * @return Method|null
     */
    public function getShippingMethod(): ?Method
    {
        return $this->shippingMethod;
    }

    /**
     * @param Method|null $shippingMethod
     * @return DefaultShippingMethodCalculator
     */
    public function setShippingMethod(?Method $shippingMethod): DefaultShippingMethodCalculator
    {
        $this->shippingMethod = $shippingMethod;
        return $this;
    }

    public function getCountry(): ?CountryInterface
    {
        return $this->country;
    }

    /**
     * @return CartPackageInterface
     */
    public function getCartPackage(): CartPackageInterface
    {
        return $this->cartPackage;
    }

    /**
     * @param $paymentMethod
     * @return ShippingFormCartCalculatorInterface
     */
    public function setPaymentMethod($paymentMethod): ShippingFormCartCalculatorInterface
    {
        $this->shippingMethod = $paymentMethod;

        return $this;
    }

    /**
     * @param CountryInterface|null $country
     * @return ShippingFormCartCalculatorInterface
     */
    public function setCountry(?CountryInterface $country): ShippingFormCartCalculatorInterface
    {
        $this->country = $country;

        return $this;
    }

    public function setCartPackage(CartPackageInterface $cartPackage): ShippingFormCartCalculatorInterface
    {
        $this->cartPackage = $cartPackage;

        return $this;
    }

    /**
     * @param Money|null $totalProductsNetto
     * @return $this
     */
    public function setTotalProductsNetto(?Money $totalProductsNetto): static
    {
        $this->totalProductsNetto = $totalProductsNetto;

        return $this;
    }

    /**
     * @param Money|null $totalProductsGross
     * @return $this
     */
    public function setTotalProductsGross(?Money $totalProductsGross): static
    {
        $this->totalProductsGross = $totalProductsGross;

        return $this;
    }

    /**
     * @return void
     */
    public function clearCalculationData(): void
    {
        parent::clearCalculationData(); // TODO: Change the autogenerated stub
    }

    /**
     * @return CartCalculatorResult|null
     * @throws \Exception
     */
    public function calculate(): ?CartCalculatorResult
    {

        $cart = $this->getCart();
        $cartPackage = $this->getCartPackage();

        if (!$this->getShippingMethod() instanceof Method) {
            $this->shippingMethod = $cartPackage->getShippingMethod();
        }

        [$totalNet, $totalGross, $price] = $this->calculateShippingCost($cart, $this->shippingMethod, true);

        return new CartShippingMethodCalculatorResult(
            $totalNet,
            $totalGross,
            $price?->getVat(true),
            ValueHelper::convertToValue(1),
            $totalNet,
            $totalGross,
            null,
            null,
            $this->shippingMethod
        );
    }

    /**
     * @param CartInterface $cart
     * @param Method|null $method
     * @param bool $addVat
     * @return array
     * @throws \Exception
     */
    public function calculateShippingCost(
        CartInterface $cart,
        ?Method       $method,
        bool          $addVat = true
    ): array {
        $totalNetto = ValueHelper::convertToMoney(0, $cart->getCurrencyIsoCode());
        $totalGross = ValueHelper::convertToMoney(0, $cart->getCurrencyIsoCode());
        $price = null;

        if ($method instanceof Method
            && $method->getProduct() instanceof ProductInterface
            && $method->getProduct()->getType() === ProductInterface::TYPE_SHIPPING
        ) {
            $price = $this->priceHelper->getPriceForProduct(
                $cart,
                $method->getProduct(),
                null,
                ValueHelper::convertToValue(1)
            );

            if ($price instanceof Price) {
                $totalNetto = $totalNetto->add($price->getNetPrice(true));
                $totalGross = $totalGross->add($price->getGrossPrice(true));
            }

        }

        return [$totalNetto, $totalGross, $price];
    }
}
