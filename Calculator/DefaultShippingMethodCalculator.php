<?php
declare(strict_types=1);

namespace LSB\OrderBundle\Calculator;

use LSB\LocaleBundle\Entity\Country;
use LSB\LocaleBundle\Entity\CountryInterface;
use LSB\OrderBundle\Entity\CartPackageInterface;
use LSB\OrderBundle\Interfaces\ShippingFormCartCalculatorInterface;
use LSB\OrderBundle\Model\CartCalculatorResult;
use LSB\OrderBundle\Model\CartShippingMethodCalculatorResult;
use LSB\ShippingBundle\Entity\Method;
use LSB\UtilityBundle\Helper\ValueHelper;
use Money\Money;

class DefaultShippingMethodCalculator extends BaseCartCalculator implements ShippingFormCartCalculatorInterface
{
    const MODULE = 'shippingForm';

    const NAME = self::MODULE;

    protected ?Method $shippingMethod = null;

    protected ?CountryInterface $country = null;

    protected ?CartPackageInterface $cartPackage = null;

    protected ?Money $totalProductsNetto = null;

    protected ?Money $totalProductsGross = null;

    public function getModule(): string
    {
        return static::MODULE;
    }

    /**
     * @return Method|null
     */
    public function getShippingMethod(): ?Method
    {
        return $this->shippingMethod;
    }

    /**
     * @param Method|null $shippingMethod
     * @return DefaultShippingMethodCalculator
     */
    public function setShippingMethod(?Method $shippingMethod): DefaultShippingMethodCalculator
    {
        $this->shippingMethod = $shippingMethod;
        return $this;
    }

    public function getCountry(): ?CountryInterface
    {
        return $this->country;
    }

    /**
     * @return CartPackageInterface
     */
    public function getCartPackage(): CartPackageInterface
    {
        return $this->cartPackage;
    }

    /**
     * @param $paymentMethod
     * @return ShippingFormCartCalculatorInterface
     */
    public function setPaymentMethod($paymentMethod): ShippingFormCartCalculatorInterface
    {
        $this->shippingMethod = $paymentMethod;

        return $this;
    }

    /**
     * @param CountryInterface|null $country
     * @return ShippingFormCartCalculatorInterface
     */
    public function setCountry(?CountryInterface $country): ShippingFormCartCalculatorInterface
    {
        $this->country = $country;

        return $this;
    }

    public function setCartPackage(CartPackageInterface $cartPackage): ShippingFormCartCalculatorInterface
    {
        $this->cartPackage = $cartPackage;

        return $this;
    }

    /**
     * @param Money|null $totalProductsNetto
     * @return $this
     */
    public function setTotalProductsNetto(?Money $totalProductsNetto): static
    {
        $this->totalProductsNetto = $totalProductsNetto;

        return $this;
    }

    /**
     * @param Money|null $totalProductsGross
     * @return $this
     */
    public function setTotalProductsGross(?Money $totalProductsGross): static
    {
        $this->totalProductsGross = $totalProductsGross;

        return $this;
    }

    /**
     * @return void
     */
    public function clearCalculationData(): void
    {
        parent::clearCalculationData(); // TODO: Change the autogenerated stub
    }

    /**
     * @return CartCalculatorResult|null
     * @throws \Exception
     */
    public function calculate(): ?CartCalculatorResult
    {
        $cart = $this->getCart();

        //TODO custom logic here
        return new CartShippingMethodCalculatorResult(
            ValueHelper::convertToMoney(100, 'PLN'),
            ValueHelper::convertToMoney(123, 'PLN'),
            null,
            null,
            null,
            null,
            null,
            null,
            $this->shippingMethod,
            $this->cartPackage
        );
    }
}
