<?php
declare(strict_types=1);

namespace LSB\OrderBundle\Calculator;

use LSB\LocaleBundle\Manager\TaxManager;
use LSB\OrderBundle\CartComponent\DataCartComponent;
use LSB\OrderBundle\CartModule\DataCartModule;
use LSB\OrderBundle\Entity\Cart;
use LSB\OrderBundle\Entity\CartInterface;
use LSB\OrderBundle\Entity\CartItem;
use LSB\OrderBundle\Entity\CartItemInterface;
use LSB\OrderBundle\Event\CartEvent;
use LSB\OrderBundle\Event\CartEvents;
use LSB\OrderBundle\Interfaces\DataCartCalculatorInterface;
use LSB\OrderBundle\Model\CartCalculatorResult;
use LSB\OrderBundle\Model\CartSummary;
use LSB\OrderBundle\Model\DataCartCalculatorResult;
use LSB\PricelistBundle\Manager\PricelistManager;
use LSB\PricelistBundle\Model\Price;
use LSB\ProductBundle\Entity\Product;
use LSB\ProductBundle\Entity\ProductSetProduct;
use LSB\UtilityBundle\Helper\ValueHelper;
use LSB\UtilityBundle\Value\Value;
use Money\Currency as MoneyCurrency;
use Money\Money;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

class DefaultDataCartCalculator extends BaseCartCalculator implements DataCartCalculatorInterface
{
    const MODULE = 'cartData';

    const NAME = self::MODULE;

    protected ?CartSummary $cartSummary = null;

    public function __construct(
        protected ParameterBagInterface $ps,
        protected DataCartComponent     $dataCartComponent,
        protected PricelistManager      $pricelistManager,
    ) {
    }

    /**
     * @return string
     */
    public function getModule(): string
    {
        return static::MODULE;
    }

    /**
     * @return void
     */
    public function clearCalculationData(): void
    {
        parent::clearCalculationData(); // TODO: Change the autogenerated stub
    }

    /**
     * @return CartCalculatorResult|null
     * @throws \Exception
     */
    public function calculate(): ?CartCalculatorResult
    {
        if (!$this->getCart() instanceof CartInterface) {
            throw new \Exception('Missing cart object');
        }

        return new DataCartCalculatorResult(
            null,
            null,
            null,
            null,
            $this->getCartSummary($this->getCart(), true)
        );
    }
}
