<?php
declare(strict_types=1);

namespace LSB\OrderBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\MappedSuperclass;
use LSB\UtilityBundle\Traits\CreatedUpdatedTrait;
use LSB\UtilityBundle\Traits\UuidTrait;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Class OrderNote
 * @package LSB\OrderBundle\Entity
 * @MappedSuperclass
 */
abstract class OrderNote implements OrderNoteInterface
{

    use UuidTrait;
    use CreatedUpdatedTrait;

    /**
     * @var string[]
     */
    public static $typeList = [
        self::TYPE_USER_NOTE => 'Order.Note.Type.UserNote',
        self::TYPE_USER_DELIVERY_NOTE => 'Order.Note.Type.UserDeliveryNote',
        self::TYPE_USER_VERIFICATION_REQUEST_NOTE => 'Order.Note.Type.UserVerificationRequestNote',
        self::TYPE_USER_INVOICE_NOTE => 'Order.Note.Type.UserInvoiceNote',
        self::TYPE_USER_NAME => 'Order.Note.Type.UserName',
        self::TYPE_MODERATOR_REJECT_NOTE => 'Order.Note.Type.ModeratorRejectNote',
        self::TYPE_SELLER_NOTE => 'Order.Note.Type.SellerNote',
        self::TYPE_SELLER_VERIFICATION_NOTE => 'Order.Note.Type.SellerVerificationNote',
        self::TYPE_AUTO_GENERATED_NOTE => 'Order.Note.Type.AutoGenerated',
        self::TYPE_AUTO_PRODUCT_SET_NOTE => 'Order.Note.Type.AutoProductSetNote',
        self::TYPE_INTERNAL_NOTE => 'Order.Note.Type.InternalNote',
    ];

    /**
     * @var OrderInterface
     * @ORM\ManyToOne(targetEntity="LSB\OrderBundle\Entity\OrderInterface", inversedBy="notes")
     */
    protected OrderInterface $order;

    /**
     * @var OrderPackageInterface|null
     * @ORM\ManyToOne(targetEntity="LSB\OrderBundle\Entity\OrderPackageIntface", inversedBy="notes")
     */
    protected ?OrderPackageInterface $orderPackage;

    /**
     * @var string|null
     * @ORM\Column(type="text", nullable=true)
     */
    protected ?string $content;

    /**
     * @var integer
     * @Groups({"Default", "EDI_User", "EDI_Moderator", "SHOP_Public"})
     * @ORM\Column(type="integer", nullable=true)
     */
    protected int $type = self::TYPE_USER_NOTE;

    /**
     * OrderNote constructor.
     * @param null $type
     * @throws \Exception
     */
    public function __construct($type = null)
    {
        $this->generateUuid();

        if ($type && array_key_exists($type, self::$typeList)) {
            $this->setType($type);
        }

        return $this;
    }

    /**
     * @throws \Exception
     */
    public function __clone()
    {
        $this->id = null;
        $this->generateUuid(true);
    }

}
